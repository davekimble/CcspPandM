--- ./CcspPandM/custom/comcast/source/TR-181/custom_ml/cosa_deviceinfo_dml_custom.c
+++ ./CcspPandM/custom/comcast/source/TR-181/custom_ml/cosa_deviceinfo_dml_custom.c	2015-05-04 11:39:36.218783877 -0600
@@ -105,9 +105,52 @@
         BOOL*                       pBool
     )
 {
+    PCOSA_DATAMODEL_DEVICEINFO      pMyObject = (PCOSA_DATAMODEL_DEVICEINFO)g_pCosaBEManager->hDeviceInfo;
+
+#ifdef CONFIG_INTERNET2.0
+    if (AnscEqualString(ParamName, "X_RDKCENTRAL-COM_ConfigureWiFi", TRUE))
+    {
+       *pBool = pMyObject->bWiFiConfigued;
+	return TRUE;
+    }
+    if (AnscEqualString(ParamName, "X_RDKCENTRAL-COM_CloudUICapable", TRUE))
+    {
+/*       *pBool = pMyObject->bCloudCapable;
+	return TRUE; */
+
+	char buf[5];
+        syscfg_get( NULL, "cloud_capable_flag", buf, sizeof(buf));
+    	if( buf != NULL )
+    		{
+    		    if (strcmp(buf,"1") == 0)
+    		        pMyObject->bCloudCapable = TRUE;
+    		    else
+    		        pMyObject->bCloudCapable = FALSE;
+    		}
+	*pBool = pMyObject->bCloudCapable;
+	return TRUE;
+
+    }
+    if (AnscEqualString(ParamName, "X_RDKCENTRAL-COM_CloudUIEnable", TRUE))
+    {
+       *pBool = pMyObject->bCloudEnable;
+	char buf[5];
+        syscfg_get( NULL, "cloud_enable_flag", buf, sizeof(buf));
+    	if( buf != NULL )
+    		{
+    		    if (strcmp(buf,"1") == 0)
+    		        pMyObject->bCloudEnable = TRUE;
+    		    else
+    		        pMyObject->bCloudEnable = FALSE;
+    		}
+	*pBool = pMyObject->bCloudEnable;
+	return TRUE;
+    }
+#endif
+ 
 #ifdef CONFIG_CISCO_HOTSPOT
     /* check the parameter name and return the corresponding value */
-    if (AnscEqualString(ParamName, "X_COMCAST-COM_xfinitywifiCapable", TRUE))
+    if (AnscEqualString(ParamName, "X_COMCAST-COM_xfinitywifiCapableCPE", TRUE))
     {
         if (CosaDmlDiGetXfinityWiFiCapable(pBool) != ANSC_STATUS_SUCCESS)
             return FALSE;
@@ -175,6 +218,15 @@
 {
     PCOSA_DATAMODEL_DEVICEINFO      pMyObject = (PCOSA_DATAMODEL_DEVICEINFO)g_pCosaBEManager->hDeviceInfo;
     
+#ifdef CONFIG_INTERNET2.0   
+    if( AnscEqualString(ParamName, "X_RDKCENTRAL-COM_CloudUIWebURL", TRUE))
+    { 
+	syscfg_get(NULL, "redirection_url", pMyObject->WebURL, sizeof(pMyObject->WebURL));
+	AnscCopyString(pValue, pMyObject->WebURL);
+        return 0;
+    } 
+#endif
+
 #ifdef CONFIG_VENDOR_CUSTOMER_COMCAST
 	if( AnscEqualString(ParamName, "X_COMCAST-COM_CM_MAC", TRUE))
 	{
@@ -188,6 +240,12 @@
 	   return 0;
 	}
 
+	if( AnscEqualString(ParamName, "X_COMCAST-COM_AP_MAC", TRUE))
+	{
+	   CosaDmlDiGetRouterMacAddress(NULL, pValue,pulSize);
+	   return 0;
+	}
+
 	if( AnscEqualString(ParamName, "X_COMCAST-COM_MTA_MAC", TRUE))
 	{
 	   CosaDmlDiGetMTAMacAddress(NULL, pValue,pulSize);
@@ -217,6 +275,70 @@
     return -1;
 }
 
+#ifdef CONFIG_INTERNET2.0
+
+/**********************************************************************  
+
+    caller:     DeviceInfo_SetParamBoolValue_Custom 
+
+    prototype: 
+
+        void
+        RevertURLRedirection
+            (
+
+            );
+
+    description:
+
+        This function will initilaize the changes for redirection
+
+    argument:   None
+
+    return:     Nothing
+
+**********************************************************************/
+
+void RedirectURL()
+{
+	printf("%s WiFi SSID and Passwords are not configured ,redirecting to URL\n",__FUNCTION__);
+	system("source /etc/redirect_url.sh");
+}
+
+
+
+/**********************************************************************  
+
+    caller:     DeviceInfo_SetParamBoolValue_Custom 
+
+    prototype: 
+
+        void
+        RevertURLRedirection
+            (
+
+            );
+
+    description:
+
+        This function will revert the changes made for redirection.
+
+    argument:   None
+
+    return:     Nothing
+
+**********************************************************************/
+
+void *RevertURLRedirection()
+{
+	int ret;
+	ret=system("source /etc/revert_redirect.sh");
+	ret=WEXITSTATUS(ret);
+	return (void *) ret;
+}
+
+#endif
+
 /**********************************************************************  
 
     caller:     owner of this object 
@@ -256,6 +378,142 @@
         BOOL                        bValue
     )
 {
+
+    PCOSA_DATAMODEL_DEVICEINFO      pMyObject = (PCOSA_DATAMODEL_DEVICEINFO)g_pCosaBEManager->hDeviceInfo;
+
+#ifdef CONFIG_INTERNET2.0
+
+    if (AnscEqualString(ParamName, "X_RDKCENTRAL-COM_ConfigureWiFi", TRUE))
+    {
+	if ( bValue == TRUE )
+	{
+	   if ( pMyObject->bWiFiConfigued == TRUE )
+		{
+			printf("Already set to TRUE, do nothing\n");
+		}
+	   else
+		{
+			pMyObject->bWiFiConfigued = bValue;
+			pthread_t red;
+			pthread_create(&red, NULL, &RedirectURL, NULL);
+
+		}
+		return TRUE;
+	 }
+	
+         else if  ( bValue == FALSE )
+	 {
+                if ( pMyObject->bWiFiConfigued == FALSE )
+		{
+			printf("Already set to FALSE, do nothing\n");
+		}
+		else
+		{
+/*			pMyObject->bWiFiConfigued = bValue;
+			pthread_t red;
+		   	pthread_create(&red, NULL, &RevertURLRedirection, NULL);*/
+			pthread_t rev;
+			void *status;
+			int val;
+			pthread_create(&rev, NULL, &RevertURLRedirection, NULL);
+			pthread_join(rev, &status);
+			val=(int)status;
+			if ( val == 0)
+			{
+				// This flag is required to indicate redirection is reverted
+				// This is done to solve issues in GET of configured flag during 
+				// some SET operation.
+				system("touch /nvram/reverted");
+				pMyObject->bWiFiConfigued = bValue;
+			}
+			
+			else
+			{
+				printf("SSID/Passphrase or both not configured yet\n");
+				return FALSE;
+			}
+							
+	
+		return TRUE;
+		}
+	 }	
+	return TRUE;
+    } 
+
+    if (AnscEqualString(ParamName, "X_RDKCENTRAL-COM_CloudUICapable", TRUE))
+    {
+       // We should not allow SET of Capable flag.
+#if 0 
+	  if( bValue == TRUE) {
+
+             if (syscfg_set(NULL, "cloud_capable_flag", "1") != 0) {
+                     AnscTraceWarning(("syscfg_set failed\n"));
+             } else {
+
+                    if (syscfg_commit() != 0) {
+                            AnscTraceWarning(("syscfg_commit failed\n"));
+                    }
+		    pMyObject->bCloudCapable = bValue;
+             }
+
+         } else {
+
+             if (syscfg_set(NULL, "cloud_capable_flag", "0") != 0) {
+                     AnscTraceWarning(("syscfg_set failed\n"));
+             }  else {
+
+                 if (syscfg_commit() != 0) {
+                     AnscTraceWarning(("syscfg_commit failed\n"));
+                 }
+		  pMyObject->bCloudCapable = bValue;
+             }
+         }
+#endif
+	return TRUE;
+
+
+    }
+    if (AnscEqualString(ParamName, "X_RDKCENTRAL-COM_CloudUIEnable", TRUE))
+    {
+        
+
+	if ( pMyObject->bCloudCapable == TRUE )
+	{
+
+          if( bValue == TRUE) {
+
+             if (syscfg_set(NULL, "cloud_enable_flag", "1") != 0) {
+                     AnscTraceWarning(("syscfg_set failed\n"));
+             } else {
+
+                    if (syscfg_commit() != 0) {
+                            AnscTraceWarning(("syscfg_commit failed\n"));
+                    }
+			pMyObject->bCloudEnable = bValue;
+             }
+
+         } else {
+
+             if (syscfg_set(NULL, "cloud_enable_flag", "0") != 0) {
+                     AnscTraceWarning(("syscfg_set failed\n"));
+             }  else {
+
+                 if (syscfg_commit() != 0) {
+                     AnscTraceWarning(("syscfg_commit failed\n"));
+                 }
+			pMyObject->bCloudEnable = bValue;
+             }
+         }
+	}
+	else
+	{
+		printf("First enable cloud capable to modify this parameter\n");
+		return FALSE;
+	}
+	return TRUE;
+    }
+#endif
+
 #ifdef CONFIG_CISCO_HOTSPOT
     /* check the parameter name and return the corresponding value */
     if (AnscEqualString(ParamName, "X_COMCAST_COM_xfinitywifiEnable", TRUE))
